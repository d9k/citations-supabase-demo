import { JsonView } from '/~/shared/ui/json-view.tsx';
import { WithQueryKeyUniqueSuffix } from '/~/shared/lib/react/query/key.ts';
import { useQuery } from '@tanstack/react-query';
import { useSupabase } from '/~/shared/providers/supabase/client.ts';
import {
  DbFieldInfo,
  DbTable,
} from '/~/shared/api/supabase/json-schema.types.ts';
import { DataGrid } from '/~/shared/ui/data-grid/index.tsx';
import { useMemo } from 'react';
import { Column } from '/~/shared/ui/data-grid/index.tsx';

//@deno-types="@types/lodash"
import {
  capitalize,
  difference,
  intersection,
  isNull,
  keys,
  pick,
} from 'lodash';

// @deno-types="@types/react-data-grid"
import { Row, textEditor } from 'react-data-grid';

import { RecordAny } from '/~/shared/lib/ts/record-any.ts';
import { arrayDiff } from '/~/shared/lib/diff.ts';

import {
  FIELDS_AUTOGENERATED,
  FIELDS_IDS,
} from '/~/shared/api/supabase/const.ts';

import { notifications } from '@mantine/notifications';
import { json } from '/~/shared/lib/json.ts';
import { useState } from 'react';

export type SupabaseAutogeneratedDataGridProps = {
  allowInsert?: boolean;
  columnsNamesFirst?: string[];
  columnsNamesLast?: string[];
  onReloadRequired?: () => void;
  tableName: string;
  tableSchema: DbTable;
} & WithQueryKeyUniqueSuffix;

type R = RecordAny;
export type ColumnAny = Column<RecordAny>;

const NEW_RECORD_ID = '+';

const ERROR_SUPABASE_SHOW_DELAY = 8000;

export const SupabaseAutogeneratedDataGrid = (
  {
    allowInsert = true,
    columnsNamesFirst = ['id'],
    columnsNamesLast = [],
    onReloadRequired,
    tableName,
    tableSchema,
    queryKeyUniqueSuffix,
  }: SupabaseAutogeneratedDataGridProps,
) => {
  const rowKeyGetter = (row: RecordAny | null) => row?.id;

  // deno-lint-ignore no-explicit-any
  const rowKeySetter = (row: RecordAny, values: any[]) => row.id = values[0];

  const createDummyRecord = (fieldsNamesEditable: string[]) => {
    const result = {
      /** To prevent warn "A component is changing an uncontrolled input to be controlled" */
      ...Object.fromEntries(fieldsNamesEditable.map((n) => [n, ''])),
    };

    rowKeySetter(result, [NEW_RECORD_ID]);

    return result;
  };

  console.debug(
    'SupabaseAutogeneratedDataGrid: queryKeyUniqueSuffix:',
    queryKeyUniqueSuffix,
  );
  const fieldsNames = keys(tableSchema);

  const supabase = useSupabase();

  const fieldsNamesEditable = difference(fieldsNames, FIELDS_AUTOGENERATED);

  const fieldsNamesNullable = fieldsNamesEditable
    .filter((n) => {
      const fieldInfo: DbFieldInfo = tableSchema[n];
      return fieldInfo.nullable;
    });

  const fieldsNamesRequired = difference(
    fieldsNamesEditable,
    fieldsNamesNullable,
  );

  const { data, isFetched, error } = useQuery({
    queryKey: ['SupabaseAutogeneratedDataGrid' + queryKeyUniqueSuffix],
    queryFn: () => supabase?.from(tableName).select('*'),
  });

  // TODO Supabase type
  const dataData = ((data || {}) as RecordAny).data;

  const [currentRow, setCurrentRow] = useState<RecordAny | null>(null);

  const rows = useMemo(() => {
    let result = [...(dataData || [])];

    if (allowInsert) {
      result = [createDummyRecord(fieldsNamesEditable), ...result];
    }

    const currentRowId = rowKeyGetter(currentRow);

    return result.map((r) =>
      (rowKeyGetter(r) === currentRowId) ? currentRow : r
    );
  }, [currentRow, dataData]);

  const columns: ColumnAny[] = useMemo(() => {
    const fieldsNamesFirst = intersection(fieldsNames, columnsNamesFirst);
    const fieldsNamesLast = intersection(fieldsNames, columnsNamesLast);
    const fieldsNamesRest = difference(
      fieldsNames,
      columnsNamesFirst,
      columnsNamesLast,
    );

    const fieldsNamesRestSorted = [
      ...intersection(fieldsNamesRest, fieldsNamesRequired),
      ...difference(fieldsNamesRest, fieldsNamesRequired),
    ];

    const fieldsNamesSorted = [
      ...fieldsNamesFirst,
      ...fieldsNamesRestSorted,
      ...fieldsNamesLast,
    ];

    return fieldsNamesSorted.map((fieldName) => {
      const required = fieldsNamesRequired.includes(fieldName);

      const column: ColumnAny = {
        editable: !FIELDS_AUTOGENERATED.includes(fieldName),
        frozen: FIELDS_IDS.includes(fieldName),
        key: fieldName,
        name: `${fieldName}${required ? ' *' : ''}`,
        renderEditCell: textEditor,
      };

      return column;
    });
  }, [tableSchema]);

  console.log('SupabaseAutogeneratedDataGrid: columns:', columns);

  const handleRowsChange = async (newRows: RecordAny[]) => {
    const changedRows = arrayDiff(newRows, rows);

    const changedRowAllFields = changedRows[0];

    setCurrentRow(changedRowAllFields);

    const id = rowKeyGetter(changedRowAllFields);

    console.log(
      'SupabaseAutogeneratedDataGrid: handleRowsChange:',
      changedRowAllFields,
    );

    const fieldsNames = keys(changedRowAllFields);
    const filteredFieldsNames = intersection(fieldsNames, fieldsNamesEditable);
    const changedRow = pick(
      changedRowAllFields,
      filteredFieldsNames,
    );

    if (!id) {
      throw Error('id not set');
    }

    const insertMode = id === NEW_RECORD_ID;
    const insertModeText = insertMode ? 'insert' : 'update';
    const insertModeTextCapital = capitalize(insertModeText);

    let errorText = '';
    let result = null;

    fieldsNamesNullable.forEach((n) => {
      if (changedRow[n] === '') {
        changedRow[n] = null;
      }
    });

    try {
      if (insertMode) {
        result = await supabase?.from(tableName).insert(changedRow);
      } else {
        result = await supabase?.from(tableName).update(changedRow).eq(
          'id',
          id,
        );
      }

      console.log(
        `SupabaseAutogeneratedDataGrid: ${insertModeText} result:`,
        result,
        'changed row:',
        changedRow,
      );
    } catch (e) {
      errorText = json(e);
    }

    errorText ||= result?.error ? json(result.error) : '';

    if (errorText) {
      notifications.show({
        color: 'red',
        title: `Error while row ${insertModeText}`,
        message: errorText,
        autoClose: ERROR_SUPABASE_SHOW_DELAY,
      });
      console.error(errorText);
    } else {
      notifications.show({
        message: `${insertModeTextCapital} successfull`,
      });

      onReloadRequired?.();
      setCurrentRow(null);
    }
  };

  return (
    <>
      {isFetched
        ? (
          <>
            <DataGrid
              columns={columns}
              rows={rows}
              onRowsChange={handleRowsChange}
            />
            <JsonView data={{ ...data, rows, tableSchema }} />
          </>
        )
        : undefined}
    </>
  );
};
