import { JsonView } from '/~/shared/ui/json-view.tsx';
import { WithQueryKeyUniqueSuffix } from '/~/shared/lib/react/query/key.ts';
import { useQuery } from '@tanstack/react-query';
import { useSupabase } from '/~/shared/providers/supabase/client.ts';
import {
  DbFieldInfo,
  DbTable,
} from '/~/shared/api/supabase/json-schema.types.ts';
import { DataGrid } from '/~/shared/ui/data-grid/index.tsx';
import { useMemo } from 'react';
import { Column } from '/~/shared/ui/data-grid/index.tsx';

//@deno-types="@types/lodash"
import { difference, intersection, keys, pick } from 'lodash';
import { useTransition } from 'react';

// @deno-types="@types/react-data-grid"
import { Row, textEditor } from 'react-data-grid';

import {
  FIELDS_AUTOGENERATED,
  FIELDS_IDS,
} from '/~/shared/api/supabase/const.ts';

import { notifications } from '@mantine/notifications';
import { json } from '/~/shared/lib/json.ts';

export type SupabaseAutogeneratedDataGridProps = {
  allowInsert?: boolean;
  columnsNamesFirst?: string[];
  columnsNamesLast?: string[];
  onReloadRequired?: () => void;
  tableName: string;
  tableSchema: DbTable;
} & WithQueryKeyUniqueSuffix;

export type ColumnAny = Column<Record<string, any>>;

// deno-lint-ignore ban-types
type R = {};

const NEW_RECORD_ID = '+';

const createDummyRecord = (fieldsNamesEditable: string[]) => {
  const result = {
    id: NEW_RECORD_ID,
    /** To prevent warn "A component is changing an uncontrolled input to be controlled" */
    ...Object.fromEntries(fieldsNamesEditable.map((n) => [n, ''])),
  };

  return result;
};

export const SupabaseAutogeneratedDataGrid = (
  {
    allowInsert = true,
    columnsNamesFirst = ['id'],
    columnsNamesLast = [],
    onReloadRequired,
    tableName,
    tableSchema,
    queryKeyUniqueSuffix,
  }: SupabaseAutogeneratedDataGridProps,
) => {
  console.debug(
    'SupabaseAutogeneratedDataGrid: queryKeyUniqueSuffix:',
    queryKeyUniqueSuffix,
  );

  const fieldsNames = keys(tableSchema);

  const supabase = useSupabase();

  const { data, isFetched, error } = useQuery({
    queryKey: ['SupabaseAutogeneratedDataGrid' + queryKeyUniqueSuffix],
    queryFn: () => supabase?.from(tableName).select('*'),
  });

  const dataData = ((data || {}) as any).data;

  const fieldsNamesEditable = difference(fieldsNames, FIELDS_AUTOGENERATED);

  const fieldsNamesRequired = fieldsNamesEditable
    .filter((n) => {
      const fieldInfo: DbFieldInfo = tableSchema[n];
      return !fieldInfo.nullable;
    });

  const rows = useMemo(() => {
    const result = [...(dataData || [])];

    if (allowInsert) {
      result.unshift(createDummyRecord(fieldsNamesEditable));
    }

    return result;
  }, [dataData]);

  const columns: ColumnAny[] = useMemo(() => {
    const fieldsNamesFirst = intersection(fieldsNames, columnsNamesFirst);
    const fieldsNamesLast = intersection(fieldsNames, columnsNamesLast);
    const fieldsNamesRest = difference(
      fieldsNames,
      columnsNamesFirst,
      columnsNamesLast,
    );

    const fieldsNamesRestSorted = [
      ...intersection(fieldsNamesRest, fieldsNamesRequired),
      ...difference(fieldsNamesRest, fieldsNamesRequired),
    ];

    const fieldsNamesSorted = [
      ...fieldsNamesFirst,
      ...fieldsNamesRestSorted,
      ...fieldsNamesLast,
    ];

    return fieldsNamesSorted.map((fieldName) => {
      const required = fieldsNamesRequired.includes(fieldName);

      const column: ColumnAny = {
        editable: !FIELDS_AUTOGENERATED.includes(fieldName),
        frozen: FIELDS_IDS.includes(fieldName),
        key: fieldName,
        name: `${fieldName}${required ? ' *' : ''}`,
        renderEditCell: textEditor,
      };

      return column;
    });
  }, [tableSchema]);

  console.log('SupabaseAutogeneratedDataGrid: columns:', columns);

  const handleRowsChange = async (rows: R[]) => {
    const changedRowAllFields = rows[0];
    const id = (changedRowAllFields as any).id;
    console.log(
      'SupabaseAutogeneratedDataGrid: handleRowsChange:',
      changedRowAllFields,
    );

    const fieldsNames = keys(changedRowAllFields);
    const filteredFieldsNames = intersection(fieldsNames, fieldsNamesEditable);
    const changedRow = pick(changedRowAllFields, filteredFieldsNames);
    // const changedRow = pick(changedRowAllFields, ['name']);

    if (!id) {
      throw Error('id not set');
    }

    if (id === NEW_RECORD_ID) {
      return;
    }

    let errorText = '';
    let result = null;

    try {
      result = await supabase?.from(tableName).update(changedRow).eq(
        'id',
        id,
      );

      console.log('SupabaseAutogeneratedDataGrid: handleRowsChange:', result);
    } catch (e) {
      errorText = json(e);
    }

    errorText ||= result?.error ? json(result.error) : '';

    if (errorText) {
      notifications.show({
        color: 'red',
        title: 'Error while row update',
        message: errorText,
      });
      console.error(errorText);
    } else {
      notifications.show({
        message: 'Update successfull',
      });
    }

    onReloadRequired?.();
  };

  return (
    <>
      {isFetched
        ? (
          <>
            <DataGrid
              columns={columns}
              rows={rows}
              onRowsChange={handleRowsChange}
            />
            <JsonView data={{ ...data, rows, tableSchema }} />
          </>
        )
        : undefined}
    </>
  );
};
