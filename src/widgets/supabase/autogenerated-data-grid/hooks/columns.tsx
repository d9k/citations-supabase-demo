import { useMemo } from 'react';

export type UseColumnsArgs = {
  columnsNames: string[];
  columnsNamesAutogenerated: string[];
  columnsNamesFirst: string[];
  columnsNamesIds: string[];
  columnsNamesLast: string[];
  columnsNamesRequired: string[];
};

import { ColumnAny } from '/~/shared/ui/data-grid/index.tsx';

// @deno-types="@types/react-data-grid"
import { Row, textEditor } from 'react-data-grid';

//@deno-types="@types/lodash"
import { difference, intersection } from 'lodash';

export const useColumns = ({
  columnsNames,
  columnsNamesAutogenerated,
  columnsNamesFirst,
  columnsNamesIds,
  columnsNamesLast,
  columnsNamesRequired,
}: UseColumnsArgs) => {
  return useMemo(() => {
    const fieldsNamesFirst = intersection(
      columnsNamesFirst,
      columnsNames,
    );
    const fieldsNamesLast = intersection(columnsNamesLast, columnsNames);
    const fieldsNamesRest = difference(
      columnsNames,
      columnsNamesFirst,
      columnsNamesLast,
    );

    const fieldsNamesRestSorted = [
      ...intersection(fieldsNamesRest, columnsNamesRequired).sort(),
      ...difference(fieldsNamesRest, columnsNamesRequired).sort(),
    ];

    const fieldsNamesSorted = [
      ...fieldsNamesFirst,
      ...fieldsNamesRestSorted,
      ...fieldsNamesLast,
    ];

    return fieldsNamesSorted.map((fieldName) => {
      const required = columnsNamesRequired.includes(fieldName);

      const column: ColumnAny = {
        editable: !columnsNamesAutogenerated.includes(fieldName),
        frozen: columnsNamesIds.includes(fieldName),
        key: fieldName,
        name: `${fieldName}${required ? ' *' : ''}`,
        renderEditCell: textEditor,
      };

      return column;
    });
  }, [columnsNamesFirst, columnsNamesLast, columnsNames, columnsNamesRequired]);
};
