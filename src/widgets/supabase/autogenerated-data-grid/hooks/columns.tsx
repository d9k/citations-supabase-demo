import { useMemo } from 'react';

import { IdNameRecord } from '/~/shared/api/supabase/records.types.ts';
import { FieldToForeignTable } from '/~/shared/api/supabase/hooks/foreign-tables.ts';

export type UseColumnsArgs = {
  columnsNames: string[];
  columnsNamesAutogenerated: string[];
  columnsNamesFirst: string[];
  columnsNamesIds: string[];
  columnsNamesLast: string[];
  columnsNamesRequired: string[];
  foreignidsNames?: IdNameRecord[];
  fieldToForeignTable?: FieldToForeignTable;
};

//@deno-types="@types/lodash"
import { get, set } from 'lodash';

import { ColumnAny } from '/~/shared/ui/data-grid/index.tsx';

// @deno-types="@types/react-data-grid"
import { Row, textEditor } from 'react-data-grid';

//@deno-types="@types/lodash"
import { difference, intersection } from 'lodash';

import { CellDropdownSelectorItem } from '/~/shared/ui/data-grid/cell-dropdown-selector.tsx';
import { CellDropdownSelector } from '/~/shared/ui/data-grid/cell-dropdown-selector.tsx';

export type SelectorItemsByForeignTable = {
  [foreignTableName: string]: CellDropdownSelectorItem[];
};

export const useColumns = ({
  columnsNames,
  columnsNamesAutogenerated,
  columnsNamesFirst,
  columnsNamesIds,
  columnsNamesLast,
  columnsNamesRequired,
  fieldToForeignTable = {},
  foreignidsNames = [],
}: UseColumnsArgs) => {
  const HOOK_NAME = 'useColumns';

  const foreignTableToSelectorItems = useMemo(
    () => {
      const FN_NAME = 'selectorItemsByForeignTable';

      const result: SelectorItemsByForeignTable = {};

      foreignidsNames.forEach((idName) => {
        const { id, short_name, table_name } = idName;

        if (!table_name) {
          console.error(
            `${HOOK_NAME}: ${FN_NAME}: no table_name in record `,
            idName,
          );
          return;
        }

        if (!id) {
          console.error(
            `${HOOK_NAME}: ${FN_NAME}: no id in record `,
            idName,
          );
          return;
        }

        result[table_name] ||= [];
        result[table_name].push({
          label: `${id}. ${short_name}`,
          value: `${id}`,
        });
      });

      return result;
    },
    [foreignidsNames],
  );

  return useMemo(() => {
    const fieldsNamesFirst = intersection(
      columnsNamesFirst,
      columnsNames,
    );
    const fieldsNamesLast = intersection(columnsNamesLast, columnsNames);
    const fieldsNamesRest = difference(
      columnsNames,
      columnsNamesFirst,
      columnsNamesLast,
    );

    const fieldsNamesRestSorted = [
      ...intersection(fieldsNamesRest, columnsNamesRequired).sort(),
      ...difference(fieldsNamesRest, columnsNamesRequired).sort(),
    ];

    const fieldsNamesSorted = [
      ...fieldsNamesFirst,
      ...fieldsNamesRestSorted,
      ...fieldsNamesLast,
    ];

    const columns = fieldsNamesSorted.map((fieldName) => {
      const required = columnsNamesRequired.includes(fieldName);

      const foreignTable = fieldToForeignTable[fieldName];

      let selectorItems: CellDropdownSelectorItem[] = [];

      if (foreignTable) {
        selectorItems = foreignTableToSelectorItems[foreignTable] || [];
      }

      const column: ColumnAny = {
        editable: !columnsNamesAutogenerated.includes(fieldName),
        frozen: columnsNamesIds.includes(fieldName),
        key: fieldName,
        name: `${fieldName}${required ? ' *' : ''}`,
        renderEditCell: selectorItems.length
          ? (renderProps) => (
            <CellDropdownSelector
              key={'fieldName_selector'}
              data={selectorItems}
              {...renderProps}
            />
          )
          : textEditor,
      };

      return column;
    });

    return {
      columns,
      fieldsNamesFirst,
      fieldsNamesLast,
      fieldsNamesRestSorted,
      fieldsNamesSorted,
      foreignTableToSelectorItems,
    };
  }, [
    columnsNamesFirst,
    columnsNamesLast,
    columnsNames,
    columnsNamesRequired,
    foreignTableToSelectorItems,
    fieldToForeignTable,
  ]);
};
