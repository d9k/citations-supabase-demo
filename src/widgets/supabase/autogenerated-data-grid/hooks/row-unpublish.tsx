import { useCallback } from 'react';
import { RecordAny } from '/~/shared/lib/ts/record-any.ts';
import { useSupabase } from '/~/shared/providers/supabase/index.ts';
import { FnKeyGetter } from '/~/shared/api/supabase/types/keys.types.ts';
import { json } from '/~/shared/lib/json.ts';
import { notifications } from '@mantine/notifications';
import { ERROR_SUPABASE_SHOW_DELAY } from '/~/widgets/supabase/autogenerated-data-grid/const.ts';
import { UseStateSetter } from '/~/shared/lib/react/hooks-types.ts';

export type UseOnRowUnpublishArgs = {
  rowKeyGetter: FnKeyGetter;
  // setRowToDelete: UseStateSetter<RecordAny | null>;
  tableName: string;
  onReloadRequired?: () => void;
};

export const HOOK_NAME = 'useOnRowUnpublish';

export const useOnRowUnpublish = ({
  onReloadRequired,
  rowKeyGetter,
  // setRowToDelete,
  tableName,
}: UseOnRowUnpublishArgs) => {
  const supabase = useSupabase();

  return useCallback(async (rowToPublish: RecordAny) => {
    const id = rowKeyGetter(rowToPublish);

    if (!id) {
      throw Error('id not set');
    }

    let errorText = '';
    let result = null;

    try {
      result = await supabase?.rpc('content_item_unpublish', {
        _table_name: tableName,
        _id: parseInt(`${id}`, 10),
      });

      console.log(
        `${HOOK_NAME}: unpublish result:`,
        result,
        'unpublishing row:',
        rowToPublish,
      );
    } catch (e) {
      errorText = json(e);
    }

    errorText ||= result?.error ? json(result.error) : '';

    if (errorText) {
      notifications.show({
        color: 'red',
        title: `Error while row publish`,
        message: <pre style={{ whiteSpace: 'pre-wrap' }}>{errorText}</pre>,
        autoClose: ERROR_SUPABASE_SHOW_DELAY,
      });
      console.error(errorText);
      return false;
    } else {
      notifications.show({
        message: `Successfullly unpublished`,
      });

      onReloadRequired?.();
      return true;
    }
  }, []);
};
