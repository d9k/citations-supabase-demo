import { DbTable } from '/~/shared/api/supabase/json-schema.types.ts';
import { useMemo, useState } from 'react';
import { RecordAny } from '/~/shared/lib/ts/record-any.ts';
import {
  COLUMN_NAME_EDITABLE,
  FIELDS_AUTOGENERATED,
} from '/~/shared/api/supabase/const.ts';
import { DbFieldInfo } from '/~/shared/api/supabase/json-schema.types.ts';

//@deno-types="@types/lodash"
import { difference, keys } from 'lodash';

export type UseFieldsNamesArgs = {
  hasEditableInfo: boolean;
  tableSchema: DbTable;
};

export const useFieldsNames = (
  { hasEditableInfo, tableSchema }: UseFieldsNamesArgs,
) => {
  const fieldsNamesOriginal = useMemo(() => keys(tableSchema), [tableSchema]);

  const fieldsNames = useMemo(() => {
    const result = [...fieldsNamesOriginal];
    if (hasEditableInfo) {
      result.push(COLUMN_NAME_EDITABLE);
    }
    return result;
  }, [fieldsNamesOriginal, hasEditableInfo]);

  const fieldsNamesEditable = useMemo(() =>
    difference(
      fieldsNames,
      FIELDS_AUTOGENERATED,
    ), [fieldsNames]);

  const fieldsNamesNullable = useMemo(() =>
    fieldsNamesEditable
      .filter((n) => {
        const fieldInfo: DbFieldInfo = tableSchema[n];
        return fieldInfo.nullable;
      }), [fieldsNamesEditable]);

  const fieldsNamesRequired = useMemo(() =>
    difference(
      fieldsNamesEditable,
      fieldsNamesNullable,
    ), [fieldsNamesEditable, fieldsNamesNullable]);

  return {
    fieldsNamesOriginal,
    fieldsNames,
    fieldsNamesEditable,
    fieldsNamesNullable,
    fieldsNamesRequired,
  };
};
